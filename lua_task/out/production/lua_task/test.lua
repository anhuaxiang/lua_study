---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/10/25 10:19
---


--info_string = " ens33 Link encap:Ethernet  HWaddr 00:0c:29:ec:0e:db inet addr:192.168.145.128  Bcast:192.168.145.255  Mask:255.255.255.0"
--ip = string.match(info_string, "inet addr:([%d.]+)")
--print(ip)
--
--function list_iter(t)
--    local i = 0
--    local n = table.getn(t)
--    return function()
--        i = i + 1
--        if i <= n then
--            return t[i]
--        end
--    end
--end


--t = {10, 20, 30}
--iter = list_iter(t)
--while true do
--    local value = iter()
--    if not value then
--        break
--    end
--    print(value)
--end
--
--for value in list_iter(t) do
--    print(value)
--end


--function all_words()
--    local line = io.read()
--    local pos = 1
--    return function()
--        while line do
--            local s, e = string.find(line, "%w+", pos)
--            if s then
--                pos = e + 1
--                return string.sub(line, s, e)
--            else
--                line = io.read()
--                pos = 1
--            end
--        end
--    end
--
--end
--
--for x in all_words() do
--    print(x)
--end


--function ipairs(a)
--    i = 0
--    return function()
--        i = i + 1
--        local v = a[i]
--        if v then
--            return v
--        end
--    end
--end
--
--t = {1, 2, 3, 4}
--for v in ipairs(t) do
--    print(v)
--end

--f = loadstring("i = i * i")
--i = 2
--f()
--print(i)
--f()
--f()
--print(i)

--f = loadstring("local a = 10; return a * a")
--print(f())

--path = "C:\\windows\\luasocket.dll"
--local f = assert(loadlib(path, "luaopen_socket"), "load fail")
--f()

--print("enter a number")
--n = io.read("*number")
--if not n then
--    error("invalid input")
--else
--    print(n)
--end

--n = io.read()
--assert(tonumber(n), "invalid input: " .. n .. " is not a number")

--a = 2
--local status, err = pcall(function () a = 'a' + 1 end)
--print(status, err)
--
--function foo(str)
--    if type(str) ~= "string" then
--        error("string expected", 1)
--    end
--end
--
--foo({x=1})


--co = coroutine.create(
--    function()
--        for i=1, 3 do
--            print("co", i)
--            coroutine.yield()
--        end
--    end
--)
--print(co)
--print(coroutine.status(co))
--coroutine.resume(co)
--print(coroutine.status(co))
--coroutine.resume(co)
--print(coroutine.status(co))
--print(coroutine.resume(co))
--print(coroutine.resume(co))
--print(coroutine.resume(co))
--coroutine.resume(co)
--print(coroutine.status(co))

--co = coroutine.create(
--    function(a, b, c)
--        print("co", a, b, c)
--    end
--)
--coroutine.resume(co, 1, 2, 3)

--co = coroutine.create(function (a, b)
--    coroutine.yield(a+b, a-b)
--end)
--
--print(coroutine.resume(co, 10, 20))

--co = coroutine.create(function ()
--    return 6, 7
--end)
--print(coroutine.resume(co))


co = coroutine.create(
        function ()
            print("co", coroutine.yield())
        end)

coroutine.resume(co)
coroutine.resume(co, 4, 5)


--function producer()
--    i = 0
--    return coroutine.create(function ()
--        while true do
--            i = i + 1
--            coroutine.yield(i)
--        end
--    end)
--end
--
--function consumer(pro)
--    while true do
--        local status, value = coroutine.resume(pro)
--        print(status, value)
--    end
--end
--consumer(producer())

function print_result(a)
    for k, v in ipairs(a) do
        io.write(v, " ")
    end
    io.write("\n")
end

function permgen(a, n)
    if n == 0 then
        print_result(a)
    end
    for i=1, n do
        a[i], a[n] = a[n], a[i]
        permgen(a, n - 1)
        a[n], a[i] = a[i], a[n]
    end
end

permgen({1, 2, 3, 4, 5}, 5)